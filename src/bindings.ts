
         // This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

         /** user-defined commands **/

         export const commands = {
async getBranches() : Promise<Result<Branches, string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("get_branches") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async addRepositoryFromPath(localPath: string) : Promise<Result<null, string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("add_repository_from_path", { localPath }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setOpenRepository(id: number | null) : Promise<Result<null, string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("set_open_repository", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getOpenRepository() : Promise<Result<Repository | null, string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("get_open_repository") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getRepositories() : Promise<Result<Repository[], string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("get_repositories") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async gitFetch() : Promise<Result<null, string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("git_fetch") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getGitCommandLog(filter: GitCommandType | null) : Promise<Result<GitCommandLog[], string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("get_git_command_log", { filter }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getGraph() : Promise<Result<Commit[], string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("get_graph") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getCommitFiles(commitHash: GitHash) : Promise<Result<File[], string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("get_commit_files", { commitHash }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getFileDiff(commitHash: GitHash, path: string) : Promise<Result<FileDiff, string>> {
try {
    return { status: "ok", data: await TAURI_INVOKE("get_file_diff", { commitHash, path }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

         /** user-defined events **/

export const events = __makeEvents__<{
gitCommandEvent: GitCommandEvent
}>({
gitCommandEvent: "git-command-event"
})

         /** user-defined statics **/

         

/** user-defined types **/

export type Branches = { local: LocalBranch[]; remote: RemoteBranch[] }
export type Commit = { hash: GitHash; parent_hashes: GitHash[]; author: CommitUser; committer: CommitUser; message: string; description: string | null }
export type CommitUser = { name: string; email: string; date: string; email_hash: string }
export type DiffHunk = { 
/**
 * Raw header text
 */
header: string; lines: LineDiff[] }
export type DiffStatus = "Added" | "Removed" | "Unmodified"
export type File = { 
/**
 * None if status is addition or unmerged
 */
src_hash: GitHash | null; 
/**
 * None if status is deletion, unmerged or "work tree out of sync with the index"
 */
dst_hash: GitHash | null; status: FileStatus; 
/**
 * Optional similarity percentage (0..100) if status is copied, renamed, or modified
 */
score: number | null; src_path: string; 
/**
 * Optional destination path if status is copied or renamed
 */
dst_path: string | null }
export type FileDiff = DiffHunk[]
export type FileStatus = 
/**
 * Addition of a file
 */
"Added" | 
/**
 * Copy of a file into a new one
 */
"Copied" | 
/**
 * Deletion of a file
 */
"Deleted" | 
/**
 * Modification of the contents or mode of a file
 */
"Modified" | 
/**
 * Renaming of a file
 */
"Renamed" | 
/**
 * Change in the type of the file (regular file, symbolic link or submodule)
 */
"TypeChanged" | 
/**
 * File is unmerged (you must complete the merge before it can be committed)
 */
"Unmerged" | 
/**
 * "Unknown" change type
 */
"Unknown"
export type Fragment = { text: string; status: DiffStatus; class: string[] | null }
export type GitCommandEvent = GitCommandLog
export type GitCommandLog = { id: number; command: string; command_type: GitCommandType; created_at: string }
export type GitCommandType = "Query" | "Mutation"
export type GitHash = string
export type LineDiff = { fragments: Fragment[]; status: DiffStatus; 
/**
 * None if status is Added
 */
src_line_number: number | null; 
/**
 * None if status is Removed
 */
dst_line_number: number | null }
export type LocalBranch = { head: boolean; 
/**
 * e.g. `["feat", "implement-stuff"]`
 */
name: string[]; upstream_name: string[]; upstream_track: UpstreamTrack; hash: GitHash }
export type RemoteBranch = { 
/**
 * e.g. `["origin", "feat", "implement-stuff"]`
 */
name: string[]; hash: GitHash }
export type Repository = { id: number; name: string; local_path: string; created_at: string; last_opened_at: string | null; last_fetched_at: string | null; has_changes: boolean }
/**
 * If both are 0, it's in sync. If None, the tracked upstream is missing.
 */
export type UpstreamTrack = [number, number] | null

/** tauri-specta globals **/

         import { invoke as TAURI_INVOKE } from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: T extends null
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
  | { status: "ok"; data: T }
  | { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindow__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindow__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case "listen":
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case "once":
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case "emit":
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    }
  );
}

     